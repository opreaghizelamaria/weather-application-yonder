/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Result;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.HttpStatus;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import org.springframework.http.codec.multipart.Part;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-02-26T11:46:05.403406+02:00[Europe/Bucharest]")
@Validated
@Tag(name = "weather", description = "Weather data for cities")
public interface WeatherApi {

    /**
     * GET /api/weather
     * Reads weather information for cities
     *
     * @param city  (required)
     * @return Weather information (status code 200)
     */
    @Operation(
        operationId = "getAverages",
        description = "Reads weather information for cities",
        tags = { "weather" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Weather information", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/weather",
        produces = { "application/json" }
    )
    @ResponseStatus(HttpStatus.OK)
    default Mono<Result> getAverages(
        @NotNull @Parameter(name = "city", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "city", required = true) List<String> city,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        for (MediaType mediaType : exchange.getRequest().getHeaders().getAccept()) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                String exampleString = "{ \"result\" : [ { \"name\" : \"name\", \"temperature\" : \"temperature\", \"wind\" : \"wind\" }, { \"name\" : \"name\", \"temperature\" : \"temperature\", \"wind\" : \"wind\" } ] }";
                result = ApiUtil.getExampleResponse(exchange, MediaType.valueOf("application/json"), exampleString);
                break;
            }
        }
        return result.then(Mono.empty());

    }

}
